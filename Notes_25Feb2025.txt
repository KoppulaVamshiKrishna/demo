Array has limitations:
	size/ length is to be known in advance
	fixed size / length
	contiguous memory allocation
	insertion/ deletion may need to shift elements

	
Arrays has can primitive type also
int arr[]	is possible
but
List<int> is not possible.		List<Integer> only possible

no collections can be primitive type.




Same datatype?????????			There is no heterogenous collection/ array
everything is homogenous only
-------------

Object arr[]=new Object[10];
arr[0]=new Integer(20);		//allowed
arr[1]=new Float(2.2f);		//allowed
arr[2]="Raja";					//allowed
arr[3]=new Date();				//allowed


Integer i=arr[0];				//Error
Integer i=(Integer)arr[0];		//allowed

Need for other datastructures:

java.util package provides us
collection api
that provides collection classes
to store lot of objects in different manner.

Collection is a interface
Collections is a class
	for sorting a collection

Collections is 2 categories
	List
	Set

List is an interface
	all classes that implements List interface are List type collections

so as 
Set is an interface
	


List
----
	allows duplicates
	is ordered. Ordered does not mean asc or desc order. 
		Ordered means, in the order of addition. 
	allows us to sort the elements using Collections.sort() method (never works for Set)
	allows us to iterate in both directions (using ListIterator) (never works for Set)

Set
----
	rejects duplicates
	Order of Set depends on the type of the Set
		HashSet
			the order is based on hashCode and equals method
		TreeSet
			the order is based on Comparable or Comparator
		LinkedHashSet
			the order is based on the same order in which elements are adde
			is ordered


Map
	is an application of collection.
	key-value
	in map, the keys are stored in set
		HashMap			keys are HashSet
		TreeMap
		LinkedHashMap


Legacy classes?
---------------
	Vector
	Stack
	PriorityQueue	
	Hashtable

all legacy classes are synchronized



List:-
	ArrayList
	LinkedList
	Vector
	Stack
	

all list classes, have index

import java.util.Arrays;

public class AppEmployeeArray {
	public static void main(String[] args) {
		Employee arr[]=new Employee[5];
		arr[0]=new Employee(12, "Raja", "IT", 100000.0);
		arr[1]=new Employee(21, "Abdul", "CSE", 100000.0);
		arr[2]=new Employee(11, "Zaheer", "IT", 100000.0);
		arr[3]=new Employee(22, "Babu", "CSE", 100000.0);
		arr[4]=new Employee(30, "Krishna", "IT", 100000.0);
		
		//how to sort this array?
		Arrays.sort(arr);
		for(Employee e:arr)
			System.out.println(e);
	}
}



Employee is not comparable, so not sortable.
Solution:
	if we can modify Employee class, then
		Employee should implement Comparable interface
	if we cannot modify Employee class, then
		we can still use Comparator



Sort employees by Department asc, Name desc		//this you might have done in SQL



public class Employee implements Comparable<Employee>{
	private Integer id;
	private String name;
	private String department;
	private Double salary;
	public Employee() {}
	public Employee(Integer id, String name, String department, Double salary) {
		super();
		this.id = id;
		this.name = name;
		this.department = department;
		this.salary = salary;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public Double getSalary() {
		return salary;
	}
	public void setSalary(Double salary) {
		this.salary = salary;
	}
	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
	}
	@Override
	public int compareTo(Employee o) {
		if(this.getDepartment().equals(o.getDepartment()))
		{
			return o.getName().compareTo(this.getName());
		}else
		{
			return this.getDepartment().compareTo(o.getDepartment());
		}
	}
	
}



import java.util.Arrays;

public class AppEmployeeArray {
	public static void main(String[] args) {
		Employee arr[]=new Employee[5];
		arr[0]=new Employee(12, "Raja", "IT", 100000.0);
		arr[1]=new Employee(21, "Abdul", "CSE", 100000.0);
		arr[2]=new Employee(11, "Zaheer", "IT", 100000.0);
		arr[3]=new Employee(22, "Babu", "CSE", 100000.0);
		arr[4]=new Employee(30, "Krishna", "IT", 100000.0);
		
		//how to sort this array?
//		Arrays.sort(arr, (e1, e2)->e1.getId().compareTo(e2.getId()));
		Arrays.sort(arr);
		for(Employee e:arr)
			System.out.println(e);
	}
}




using comparable,
	a class can implement comparable only once

but we can create many comparators
		EmployeeNameComparator
		EmployeeDeptNameComparator
		EmployeeIdComparator
		EmployeeDeptSalaryComparator

a class that implements Comparator interface and override the compare method is a comparator class

we can use the object of a comparator in the collections sor tmethod

Collections.sort(arr, new EmployeeDeptSalaryComparator());
or 
we can use lambda
	lambda can be used for providing quick implementation of a functional interface

Comparator is a functional interface because, it has only 1 abstract method


add(element)
add(index, element)			List
contains		returns true or false
size			how many elements
isEmpty		true is size is 0
remove()		list and set have this method
			remove(0)		means what?	element stored at index 0 is removed

list has
		11
		12
		13
		14

	list.remove(11);			what will happen?	error.
	list.remove(new Integer(11));			removes 11



Iterator
	next()
	hasNext()
	remove()	


	public List<Integer> removePrime(List<Integer> list)
	{
		//write your code here
		for(Integer x : list)
		{
			//in every iteration, one element is stored in x
			//if x is prime, then remove it from the list

		}
	}


ListIterator





import java.util.ArrayList;
import java.util.List;

public class AppEmpList {

	public static void main(String[] args) {
		List<Integer> list=new ArrayList<>();
		list.add(12);
		list.add(2);
		list.add(112);
		list.add(121);
		list.add(15);
		list.add(52);
		list.add(16);
		list.add(162);
		
		list.removeIf((t)->t>50);
		
		System.out.println(list);
	
	}

}

iterator
	hasNext()
	next()
	remove()


ListIterator
	hasPrevious(0
	hasNext()
	previous()
	next()
	remove()


Set
----
	HashSet
		every predefined type, like Integer, String, Date, Float
		all implements hashCode() and equals() method

		

Map
------------
Map has entries
	Entry


Task
-----
Write a java program to accept a string input and display each character of that string and the number of occurrence.

input:
the complete learning journey is formalized

output:
t	2
h	2
e	4
 	5
c	1
o	3


import java.util.Scanner;

public class App2 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String input=sc.nextLine();
		//write your code here
	}

}






Stream API
	is used to work with collections
	is read only
	returns a stream (except terminal operations)
	whatever you do using SELECT statement in SQL, you can do using stream api for collections


stream api methods
	intermediate operations
	terminal operations
		forEach
		collect


import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class App2 {

	public static void main(String[] args) {
		Set<Employee> set=new HashSet<>();
		set.add(new Employee(12, "Raja", "IT", 100000.0));
		set.add(new Employee(21, "Abdul", "CSE", 100000.0));
		set.add(new Employee(22, "Babu", "CSE", 100000.0));
		set.add(new Employee(11, "Zaheer", "IT", 100000.0));
		set.add(new Employee(22, "Babu", "CSE", 100000.0));
		set.add(new Employee(30, "Krishna", "IT", 100000.0));
		set.add(new Employee(21, "Abdul", "CSE", 100000.0));
		
		List<String> result = set.stream()
		.filter((t)->t.getDepartment().equals("IT"))
		.sorted((a,b)->a.getName().compareTo(b.getName()))
		.map((e)->e.getId()+"\t"+e.getName())
		.collect(Collectors.toList());
		
		for(String e:result)
		{
			System.out.println(e);
		}
	}

}




Use stream api to display
departments and average salary



Lambda
	public class MyComparator implements Comparator<Employee>
	{
		public int compare(Employee e1, Employee e2)
		{
			return e1.getName().compareTo(e2.getName());
		}
	}

	Collections.sort(empList, new MyComparator());
	Collections.sort(empList, (a,b)->a.getName().compareTo(b.getName()));

	



	

Method reference



ObjectOutputStream oos;

oos.writeObject(emp);


public void writeObject(Serializable s){}




//@FunctionalInterface
interface Person{
	void speak();
}

class Teacher{
	void talk() {
		System.out.println("This is a method in teacher");
	}
}

public class App5 {

	public static void main(String[] args) {
		Teacher jag=new Teacher();
		Person raja=jag::talk;
		
		raja.speak();
	}

}
